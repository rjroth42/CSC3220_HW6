}
for (i in 1:nrow(filing2)){
filing2[i,"Posterior_Prob"] = signif((filing2[i,"Workload"]*filing2[i,"Misfile_Rate"])/pa,2)
}
'filing2'
}
filing2
print(filing2)
filing2 = filing
for (x in 1:8)
{
for (i in 1:nrow(filing2))
{
filing2[i,"Workload"] = filing2[i,"Posterior_Prob"]
}
pa = 0
for (i in 1:nrow(filing2)){
pa = signif(pa + filing2[i,"Workload"]*filing2[i,"Misfile_Rate"],2)
}
for (i in 1:nrow(filing2)){
filing2[i,"Posterior_Prob"] = signif((filing2[i,"Workload"]*filing2[i,"Misfile_Rate"])/pa,2)
}
print(filing2)
}
library('DAAG')
library(DAAG)
data(possum())
data(possum
)
library(DAAG)
install.packages("DAAG")
View(possum)
data.frame(possum)
load(DAAG)
load("DAAG")
Load('DAAG')
library(DAAG)
install.packages("lattice")
install.packages("lattice")
library(lattice)
library(DAAG)
View(possum)
?bwplot()
bwplot(possum$site, possum)
bwplot(possum$site, possum$sex)
bwplot(possum$site, possum$sex, data = possum)
bwplot(possume@site, by = possum$sex)
bwplot(possum@site, by = possum$sex)
bwplot(possum, by = sex)
bwplot(site ~ sex, data = possum)
bwplot(sex ~ site, data = possum)
bwplot(sex ~ age, data = possum)
bwplot(sex ~ age, data = filter(possum, sex == "m"))
bwplot(sex ~ age, data = filter(possum, sex = "m"))
bwplot(sex ~ age, data = filter(possum, sex == 'm'))
bwplot(sex ~ age, data = filter(possum, possum$sex == 'm'))
bwplot(sex ~ age, data = filter(possum, possum$sex == "m"))
library(dplyr)
bwplot(sex ~ age, data = filter(possum, sex == "m"))
bwplot(sex ~ age, data = filter(possum, sex == "f"))
hist(possum$earconch)
View(ais)
library(ggplot2)
ggplot(ais, aes(sport, rcc, fill = sex)) + geom_dotplot()
ggplot(ais, aes(sport, rcc, fill = sex)) + geom_bar()
ggplot(ais, aes(sport, rcc, fill = sex)) + geom_bar(position = "dodge")
ggplot(ais, aes(sport, rcc, fill = sex)) + geom_line()
ggplot(ais, aes(sport, rcc, fill = sex)) + geom_point()
ggplot(ais, aes(sport, rcc, fill = sex)) + geom_dotplot()
ggplot(ais, aes(sport, rcc, fill = sex)) + geom_point()
ggplot(ais, aes(sport, rcc, fill = sex)) + geom_dotplot()
ggplot(ais, aes(sport, mean(rcc), fill = sex)) + geom_dotplot()
ggplot(ais, aes(sport, rcc, fill = sex)) + geom_density()
ggplot(ais, aes(sport, rcc, fill = sex)) + geom_count()
ggplot(ais, aes(sport, rcc, fill = sex)) + geom_count(fill = sex)
ggplot(ais, aes(sport, rcc)) + geom_count(fill = sex)
ggplot(ais, aes(sport, rcc, fill = sex)) + GeomCol
ggplot(ais, aes(sport, rcc, fill = sex)) + GeomCol()
ggplot(ais, aes(sport, rcc, fill = sex)) + geom_col()
ggplot(ais, aes(sport, rcc, fill = sex)) + geom_area()
ggplot(ais, aes(sport, rcc, fill = sex)) + geom_abline()
ggplot(ais, aes(sport, rcc, fill = sex)) + geom_curve()
ggplot(ais, aes(sport, rcc, fill = sex)) + geom_freqpoly()
ggplot(ais, aes(sport, rcc, fill = sex)) + geom_line()
ggplot(ais, aes(sport, rcc, fill = sex)) + geom_line(fill = sex)
ggplot(ais, aes(sport, rcc)) + geom_line()
ggplot(ais, aes(sport, rcc)) + geom_line(fill = sex)
ggplot(ais, aes(sport, rcc)) + geom_bar(fill = sex)
ggplot(ais, aes(sport, rcc)) + geom_bar(fill = ais$ex)
ggplot(ais, aes(sport, rcc)) + geom_dotplot()
ggplot(ais, aes(sport, rcc)) + geom_crossbar()
ggplot(ais, aes(sport, rcc)) + geom_boxplot()
ggplot(ais, aes(sport, rcc)) + geom_boxplot(fill = sex)
ggplot(ais, aes(sport, rcc, fill = sex)) + geom_boxplot()
ggplot(ais, aes(sport, hc, fill = sex)) + geom_boxplot()
ggplot(ais, aes(sport, hg, fill = sex)) + geom_boxplot()
ggplot(ais, aes(sport, wcc, fill = sex)) + geom_boxplot()
ggplot(ais, aes(sport, pcBfcat, fill = sex)) + geom_boxplot()
ggplot(ais, aes(sport, pcBfat, fill = sex)) + geom_boxplot()
View(cuckoohosts)
plot(cuckoohosts$clength, cuckoohosts$cbreadth, col = "red")
line(cuckoohosts$hlength, cuckoohosts$hbreadth, col = "green")
plot(cuckoohosts$clength, cuckoohosts$cbreadth, type = "1", col = "red")
line(cuckoohosts$hlength, cuckoohosts$hbreadth, col = "green")
ggplot(cuckoohosts) +
geom_line(aes(y = clength, color  = "Red")) +
geom_line(aes(y = hlength, color  = "Green"))
ggplot(cuckoohosts) +
geom_line(aes(y = clength, x = cbreadth, color  = "Red")) +
geom_line(aes(y = hlength, x = hbreadth, color  = "Green"))
plot(cuckoohosts$clength, cuckoohosts$cbreadth)
plot(cuckoohosts$hlength, cuckoohosts$hbreadth)
ggplot(cuckoohosts) +
geom_line(aes(y = clength, x = cbreadth, color  = "Red")) +
geom_line(aes(y = hlength, x = hbreadth, color  = "Green"))
attach(cuckoohosts)
plot(c(clenght, hlength), c(cbreadth, hbreadth)),
col = rep(1:2, c(12:12)))
for( i in 1:12) lines(c(clength[i], hlength[i]),
c(cbreadth[i], hbreadth[i]))
text(hlength, hbreadth, abbreviate(rownames(cuckoohosts), 8))
detach(cuckoohosts)
attach(cuckoohosts)
plot(c(clenght, hlength), c(cbreadth, hbreadth)),
col = rep(1:2, c(12:12)))
for( i in 1:12) lines(c(clength[i], hlength[i]),
c(cbreadth[i], hbreadth[i]))
text(hlength, hbreadth, abbreviate(rownames(cuckoohosts), 8))
detach(cuckoohosts)
attach(cuckoohosts)
plot(c(clenght, hlength), c(cbreadth, hbreadth)),
col = rep(1:2, c(12:12)))
for( i in 1:12) lines(c(clength[i], hlength[i]),
c(cbreadth[i], hbreadth[i]))
text(hlength, hbreadth, abbreviate(rownames(cuckoohosts), 8))
detach(cuckoohosts)
attach(cuckoohosts)
plot(c(clength, hlength), c(cbreadth, hbreadth)),
col = rep(1:2, c(12:12)))
for( i in 1:12) lines(c(clength[i], hlength[i]),
c(cbreadth[i], hbreadth[i]))
text(hlength, hbreadth, abbreviate(rownames(cuckoohosts), 8))
detach(cuckoohosts)
attach(cuckoohosts)
plot(c(clength, hlength), c(cbreadth, hbreadth),
col = rep(1:2, c(12:12)))
for( i in 1:12) lines(c(clength[i], hlength[i]),
c(cbreadth[i], hbreadth[i]))
text(hlength, hbreadth, abbreviate(rownames(cuckoohosts), 8))
detach(cuckoohosts)
?mean()
mean(filter(possum, sex = "f")$totlngth)
mean(filter(possum, sex == "f")$totlngth)
median(filter(possum, sex == "f")$totlngth)
mean(filter(possum, sex == "f")$totlngth, .1)
boxplot(possum$earconch, possum$sex)
boxplot(possum$sex, possum$earconch)
?boxplot
boxplot(possum, earconch ~ sex)
boxplot(possum, sex ~ earconch)
boxplot(possum$sex ~ possum$earconch)
?boxplot
boxplot( earconch ~ sex, data = possum)
hist( earconch ~ sex, data = possum)
hist(data = possum, earconch ~ sex)
hist(data = possum, earconch,sex)
hist(data = possum, possum$earconch, possum$sex)
hist(possum, earconch)
hist(possum$earconch)
hist(possum$earconch, possum$sex)
hist(possum$earconch ~ possum$sex)
hist(possum$earconch)
hist(possum$sex)
hist(filter(possum, sex = "f")$earconch)
hist(filter(possum, sex == "f")$earconch)
hist(filter(possum, sex == "f")$earconch, title("Earconch for Females"))
hist(filter(possum, sex == "f")$earconch, main = "Earconch for Females")
hist(filter(possum, sex == "f")$earconch, main = "Earconch for Females", xlab = "earconch")
hist(filter(possum, sex == "m")$earconch, main = "Earconch for Males", xlab = "earconch")
library(readr)
decimal_mark(grouping_mark(,))
decimal_mark
parse_number(locale = decimal_mark())
parse_number(locale = decimal_mark("."))
parse_number("123.456", locale = decimal_mark("."))
parse_double("1,23", locale = locale(decimal_mark= ","))
parse_double("1,23", locale = locale(decimal_mark= ","), locale = locale(grouping_mark = ","))
parse_double("1,23", locale = locale(decimal_mark= ","),locale(grouping_mark = ","))
parse_double("1,23", locale = c(locale(decimal_mark= ","),locale(grouping_mark = ","))
)
parse_double("1,23", locale = locale(decimal_mark= ","))
parse_double("1,23", locale = locale(grouping_mark= ","))
parse_double("1,23", locale = locale(decimal_mark= ","))
parse_double("123,456,789.111", locale = locale(decimal_mark= ","))
parse_double("123,456,789.111", locale = locale(decimal_mark= ""), locale = locale(grouping_mark = ","))
parse_double("123,456,789.111", locale = locale(decimal_mark= "."), locale = locale(grouping_mark = ","))
parse_double("123,456,789.111", locale = locale(decimal_mark = "."))
parse_double("123,456,789.111", locale = locale(decimal_mark = ".", group_mark = ",")
)
parse_double("123,456,789.111", locale = locale(decimal_mark = ".", group_mark = ","))
parse_double("123,456,789.111", locale = locale(decimal_mark = ".", grouping_mark = ","))
locale1 = locale(decimal_mark = ".", grouping_mark = ",")
parse_double("123,456.789", locale = locale1)
parse_double("123,456.789", na= c("", "NA"), locale = locale1)
parse_double("123,456.789", na= c("", "NA"), locale = locale1)
parse_double(c("123,456.789"), na= c("", "NA"), locale = locale1)
parse_double(c("3,456.789"), na= c("", "NA"), locale = locale1)
problems()
a = parse_double(c("3,456.789"), na= c("", "NA"), locale = locale1)
a
locale1 = locale(grouping_mark = ",")
a = parse_double(c("3,456.789"), na= c("", "NA"), locale = locale1)
a = parse_double(c("3,456.789"), na= c("", "NA"), locale = locale(grouping_mark = ","))
a = parse_double(c("3,456.789"), locale = locale(grouping_mark = ","))
a = parse_double("3,456.789", locale = locale(grouping_mark = ","))
a = parse_double("3,456789", locale = locale(grouping_mark = ","))
a = parse_double("3456789", locale = locale(grouping_mark = ","))
a
parse_double("1234", locale = locale(grouping_mark = ","))
parse_double("1,234", locale = locale(grouping_mark = ","))
parse_date("Jan 1 2018", %m %d %Y)
parse_date("Jan 1 2018", %B %d %Y)
parse_date("Jan 1 2018", "%B %d %Y")
parse_date("Jan 1 2018", "%m %d %Y")
parse_date("Jan 1 2018", "%mM %d %Y")
parse_date("Jan 1 2018", "%M %d %Y")
parse_date("Jan 1 2018", "%b %d %Y")
stocks = data_fram (year = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
qtr = c(1,2,3,4,2,3,4),
return = c(1.88, 0.59, 0.35, NA 0.92, 0.17, 2.66))
stocks = data_fram (year = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
qtr = c(1,2,3,4,2,3,4),
return = c(1.88, 0.59, 0.35, NA, 0.92, 0.17, 2.66))
stocks = data.frame (year = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
qtr = c(1,2,3,4,2,3,4),
return = c(1.88, 0.59, 0.35, NA, 0.92, 0.17, 2.66))
View(stocks)
?spread
?spread()
spread()
library(tidyr)
load(tidyr)
get(tidyr)
install.packages("tidyr")
install.packages("tidyr")
library(tidyr)
?spread()
spread(stocks,qtr,1, fill = NA)
View(spread(stocks,qtr,1,fill = NA))
View(spread(stocks,qtr,return,fill = NA))
View(spread(stocks,qtr,return))
?gather
gather(stocks,qtr,return)
gather(stocks,return, year)
gather(stocks,year)
gather(stocks, year, quarter)
gather(stocks, year, qtr)
gather(stocks, return, qtr)
gather(stocks, qtr, year)
gather(stocks, qtr, year, na.rm = true )
gather(stocks, qtr, year, na.rm = True )
gather(stocks, qtr, year, na.rm = TRUE )
gather(stocks, qtr:return, year, na.rm = TRUE )
gather(stocks, c(qtr,return), year, na.rm = TRUE )
gather(stocks, qtr:return, year, na.rm = TRUE )
gather(stocks,year, qtr:return, na.rm = TRUE )
gather(stocks,year, 1:4, na.rm = TRUE )
gather(stocks,year, 1:4, na.rm = TRUE )
?spread
spread(stocks, qtr, year, drop = TRUE)
spread(stocks, qtr, return, drop = TRUE)
gather(stocks,year, return, na.rm = TRUE )
gather(stocks, qtr, return, na.rm = TRUE )
gather(stocks, year:qtr, return, na.rm = TRUE )
gather(stocks, qtr, year, na.rm = TRUE )
gather(stocks, return, year, na.rm = TRUE )
gather(stocks, year, year, na.rm = TRUE )
View(stocks)
stocks2 = spread(stocks, qtr, return, fill = NA)
View(stocks2)
gather(stocks2, year)
gather(stocks2, year, na.rm = TRUE)
gather(stocks2, year, qtr, na.rm = TRUE)
gather(stocks2, qtr, return, na.rm = TRUE)
gather(stocks2, year, 1:4, na.rm = TRUE)
gather(stocks2, qtr, 1:4, na.rm = TRUE)
gather(stocks2, "year", "qtr", 2:5)
gather(stocks2, "year", "qtr", "return", 2:5)
gather(stocks2, "qtr", "return", 1:5)
gather(stocks2, "qtr", "return", 2:5)
gather(stocks2, "qtr", "return", 2:5, na.rm = TRUE)
gather(stocks2, "return", "qtr", 2:5, na.rm = TRUE)
gather(stocks2, "qtr", "return", 2:5, na.rm = TRUE)
unique(stocks[,])
?unique
complete(stocks)
stocks2
gather(stocks2, "qtr", "return", 2:5, na.rm = TRUE)
stocks3 = gather(stocks2, "qtr", "return", 2:5, na.rm = TRUE)
complete(stocks3)
complete(stocks3, year, qtr, return)
complete(stocks3, year, qtr)
complete(stocks3, year, qtr, fill(return = 0))
complete(stocks3, year, qtr, fill = list(return = 0))
install.packages(rJava)
install.packages("rJava")
library(rJava)
install.packages("shiny")
library(shiny)
install.packages((c("maps","mapproj")))
library(maps)
library(mapproj)
setwd("C:/Dropbox/School/Spring 2018/CSC 3220 - Fundamentals of Data Science/Lab 9")
source("helpers.R")
shiny::runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
# Note: percent map is designed to work with the counties data set
# It may not work correctly with other data sets if their row order does
# not exactly match the order in which the maps package plots counties
percent_map <- function(var, color, legend.title, min, max) {
# generate vector of fill colors for map
shades <- colorRampPalette(c("white", color))(100)
# constrain gradient to percents that occur between min and max
var <- pmax(var, min)
var <- pmin(var, max)
percents <- as.integer(cut(var, 100,
include.lowest = TRUE, ordered = TRUE))
fills <- shades[percents]
# plot choropleth map
map("county", fill = TRUE, col = fills,
resolution = 0, lty = 0, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# overlay state borders
map("state", col = "white", fill = FALSE, add = TRUE,
lty = 1, lwd = 1, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# add a legend
inc <- (max - min) / 4
legend.text <- c(paste0(min, " % or less"),
paste0(min + inc, " %"),
paste0(min + 2 * inc, " %"),
paste0(min + 3 * inc, " %"),
paste0(max, " % or more"))
legend("bottomleft",
legend = legend.text,
fill = shades[c(1, 25, 50, 75, 100)],
title = legend.title)
}
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
color = strsplit("word two", " ")
View(color)
color = strsplit("word two", "[ ]")
color = strsplit("word two", "[ ]")
color[1]
color[1][1]
color[[1]]
color[[1]][1]
runApp('census-app')
runApp('census-app')
counties = readRDS("data/counties.rds")
setwd("C:/Dropbox/School/Spring 2018/CSC 3220 - Fundamentals of Data Science/Lab 9/census-app")
counties = readRDS("data/counties.rds")
View(counties)
runApp()
text = "Percent White"
var = switch(text,
"Percent White" = counties[3],
"Percent Black" = counties[4],
"Percent Hispanic" = counties[5],
"Percent Asian" = counties[6] )
runApp()
# Note: percent map is designed to work with the counties data set
# It may not work correctly with other data sets if their row order does
# not exactly match the order in which the maps package plots counties
percent_map <- function(var, color, legend.title, min = 0, max = 100) {
# generate vector of fill colors for map
shades <- colorRampPalette(c("white", color))(100)
# constrain gradient to percents that occur between min and max
var <- pmax(var, min)
var <- pmin(var, max)
percents <- as.integer(cut(var, 100,
include.lowest = TRUE, ordered = TRUE))
fills <- shades[percents]
# plot choropleth map
map("county", fill = TRUE, col = fills,
resolution = 0, lty = 0, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# overlay state borders
map("state", col = "white", fill = FALSE, add = TRUE,
lty = 1, lwd = 1, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# add a legend
inc <- (max - min) / 4
legend.text <- c(paste0(min, " % or less"),
paste0(min + inc, " %"),
paste0(min + 2 * inc, " %"),
paste0(min + 3 * inc, " %"),
paste0(max, " % or more"))
legend("bottomleft",
legend = legend.text,
fill = shades[c(1, 25, 50, 75, 100)],
title = legend.title)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
var = counties[3]
min = 10
max = 50
var <- pmax(var, min)
var <- pmin(var, max)
percents <- as.integer(cut(var, 100,
include.lowest = TRUE, ordered = TRUE))
var = counties[3]
var = pmax(var, min)
var = pmin(var, max)
var
var = counties[3]
head(var)
var = pmax(var, min)
head(var)
var = pmin(var, max)
head(var)
cut(var, 100,
include.lowest = TRUE, ordered = TRUE)
class(var)
typeof(var)
typeof(counties)
runApp()
View(counties)
var = as.numeric(counties[3])
runApp()
runApp()
runApp()
# Note: percent map is designed to work with the counties data set
# It may not work correctly with other data sets if their row order does
# not exactly match the order in which the maps package plots counties
percent_map <- function(var, color, legend.title, min, max) {
# generate vector of fill colors for map
shades <- colorRampPalette(c("white", color))(100)
# constrain gradient to percents that occur between min and max
var <- pmax(var, min)
var <- pmin(var, max)
percents <- as.integer(cut(var, 100,
include.lowest = TRUE, ordered = TRUE))
fills <- shades[percents]
# plot choropleth map
map("county", fill = TRUE, col = fills,
resolution = 0, lty = 0, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# overlay state borders
map("state", col = "white", fill = FALSE, add = TRUE,
lty = 1, lwd = 1, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# add a legend
inc <- (max - min) / 4
legend.text <- c(paste0(min, " % or less"),
paste0(min + inc, " %"),
paste0(min + 2 * inc, " %"),
paste0(min + 3 * inc, " %"),
paste0(max, " % or more"))
legend("bottomleft",
legend = legend.text,
fill = shades[c(1, 25, 50, 75, 100)],
title = legend.title)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
